// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct RemoveTodoEdgeMutation {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "RemoveTodoEdgeMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "removeTodo",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "RemoveTodoPayload",
                        plural: false,
                        selections: [
                            .field(ReaderScalarField(
                                name: "deletedTodoId"
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "RemoveTodoEdgeMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "removeTodo",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "RemoveTodoPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "deletedTodoId"
                            )),
                            .handle(NormalizationHandle(
                                kind: .scalar,
                                name: "deletedTodoId",
                                handle: "deleteEdge",
                                key: "",
                                handleArgs: [
                                    VariableArgument(name: "connections", variableName: "connections")
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "RemoveTodoEdgeMutation",
                operationKind: .mutation,
                text: """
mutation RemoveTodoEdgeMutation(
  $input: RemoveTodoInput!
) {
  removeTodo(input: $input) {
    deletedTodoId
  }
}
"""
            )
        )
    }
}

extension RemoveTodoEdgeMutation {
    public struct Variables: VariableDataConvertible {
        public var input: RemoveTodoInput
        public var connections: [String]

        public init(input: RemoveTodoInput, connections: [String]) {
            self.input = input
            self.connections = connections
        }

        public var variableData: VariableData {
            [
                "input": input,
                "connections": connections
            ]
        }
    }

    public init(input: RemoveTodoInput, connections: [String]) {
        self.init(variables: .init(input: input, connections: connections))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == RemoveTodoEdgeMutation {
    public func get(input: RemoveTodoInput, connections: [String], fetchKey: Any? = nil) -> RelaySwiftUI.Query<RemoveTodoEdgeMutation>.Result {
        self.get(.init(input: input, connections: connections), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == RemoveTodoEdgeMutation {
    public func refetch(input: RemoveTodoInput, connections: [String]) async {
        await self.refetch(.init(input: input, connections: connections))
    }
}
#endif

public struct RemoveTodoInput: VariableDataConvertible {
    public var id: String
    public var userId: String
    public var clientMutationId: String?

    public init(id: String, userId: String, clientMutationId: String? = nil) {
        self.id = id
        self.userId = userId
        self.clientMutationId = clientMutationId
    }

    public var variableData: VariableData {
        [
            "id": id,
            "userId": userId,
            "clientMutationId": clientMutationId
        ]
    }
}


extension RemoveTodoEdgeMutation {
    public struct Data: Decodable {
        public var removeTodo: RemoveTodoPayload_removeTodo?

        public struct RemoveTodoPayload_removeTodo: Decodable {
            public var deletedTodoId: String
        }
    }
}

extension RemoveTodoEdgeMutation: Relay.Operation {}