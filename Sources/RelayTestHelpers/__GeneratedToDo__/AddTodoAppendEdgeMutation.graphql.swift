// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct AddTodoAppendEdgeMutation {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "AddTodoAppendEdgeMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "addTodo",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "AddTodoPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "todoEdge",
                                concreteType: "TodoEdge",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "cursor"
                                    )),
                                    .field(ReaderLinkedField(
                                        name: "node",
                                        concreteType: "Todo",
                                        plural: false,
                                        selections: [
                                            .field(ReaderScalarField(
                                                name: "id"
                                            )),
                                            .field(ReaderScalarField(
                                                name: "text"
                                            )),
                                            .field(ReaderScalarField(
                                                name: "complete"
                                            ))
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "AddTodoAppendEdgeMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "addTodo",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "AddTodoPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "todoEdge",
                                concreteType: "TodoEdge",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "cursor"
                                    )),
                                    .field(NormalizationLinkedField(
                                        name: "node",
                                        concreteType: "Todo",
                                        plural: false,
                                        selections: [
                                            .field(NormalizationScalarField(
                                                name: "id"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "text"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "complete"
                                            ))
                                        ]
                                    ))
                                ]
                            )),
                            .handle(NormalizationHandle(
                                kind: .linked,
                                name: "todoEdge",
                                handle: "appendEdge",
                                key: "",
                                handleArgs: [
                                    VariableArgument(name: "connections", variableName: "connections")
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "AddTodoAppendEdgeMutation",
                operationKind: .mutation,
                text: """
mutation AddTodoAppendEdgeMutation(
  $input: AddTodoInput!
) {
  addTodo(input: $input) {
    todoEdge {
      cursor
      node {
        id
        text
        complete
      }
    }
  }
}
"""
            )
        )
    }
}

extension AddTodoAppendEdgeMutation {
    public struct Variables: VariableDataConvertible {
        public var input: AddTodoInput
        public var connections: [String]

        public init(input: AddTodoInput, connections: [String]) {
            self.input = input
            self.connections = connections
        }

        public var variableData: VariableData {
            [
                "input": input,
                "connections": connections
            ]
        }
    }

    public init(input: AddTodoInput, connections: [String]) {
        self.init(variables: .init(input: input, connections: connections))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == AddTodoAppendEdgeMutation {
    public func get(input: AddTodoInput, connections: [String], fetchKey: Any? = nil) -> RelaySwiftUI.Query<AddTodoAppendEdgeMutation>.Result {
        self.get(.init(input: input, connections: connections), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == AddTodoAppendEdgeMutation {
    public func refetch(input: AddTodoInput, connections: [String]) async {
        await self.refetch(.init(input: input, connections: connections))
    }
}
#endif

extension AddTodoAppendEdgeMutation {
    public struct Data: Decodable {
        public var addTodo: AddTodoPayload_addTodo?

        public struct AddTodoPayload_addTodo: Decodable {
            public var todoEdge: TodoEdge_todoEdge?

            public struct TodoEdge_todoEdge: Decodable {
                public var cursor: String
                public var node: Todo_node?

                public struct Todo_node: Decodable, Identifiable {
                    public var id: String
                    public var text: String
                    public var complete: Bool
                }
            }
        }
    }
}

extension AddTodoAppendEdgeMutation: Relay.Operation {}